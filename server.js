import express from "express";
import bodyParser from "body-parser";
import { google } from "googleapis";
import fetch from "node-fetch";
import { Readable } from "stream";

const app = express();
app.use(bodyParser.json());

// ◊ò◊ï◊¢◊†◊ô◊ù ◊î◊®◊©◊ê◊ï◊™ ◊û◊í◊ï◊í◊ú
const credentials = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT);

const auth = new google.auth.GoogleAuth({
  credentials,
  scopes: ["https://www.googleapis.com/auth/drive.file"],
});

const drive = google.drive({ version: "v3", auth });

// ◊ì◊£ ◊ë◊ô◊™ ◊ú◊ë◊ì◊ô◊ß◊î
app.get("/", (req, res) => {
  res.send("üéâ ◊î◊©◊®◊™ ◊§◊¢◊ô◊ú! ◊©◊ú◊ó ◊ë◊ß◊©◊î ◊ú÷æ/upload ◊õ◊ì◊ô ◊ú◊î◊¢◊ú◊ï◊™ ◊ß◊ï◊ë◊• ◊ú-Drive.");
});

// ◊†◊ß◊ï◊ì◊™ ◊ß◊¶◊î ◊ú◊î◊¢◊ú◊ê◊î (POST JSON)
app.post("/upload", async (req, res) => {
  const { url, folderId } = req.body;

  if (!url) {
    return res.status(400).json({ success: false, error: "‚ùå ◊ó◊°◊® ◊ß◊ô◊©◊ï◊® ◊ú◊î◊ï◊®◊ì◊î" });
  }

  // ◊û◊ó◊ñ◊ô◊®◊ô◊ù ◊™◊í◊ï◊ë◊î ◊û◊î◊ô◊®◊î ◊ú◊ú◊ß◊ï◊ó
  res.json({ success: true, message: "‚úÖ ◊î◊ß◊ô◊©◊ï◊® ◊î◊™◊ß◊ë◊ú, ◊û◊™◊ó◊ô◊ú◊ô◊ù ◊ë◊™◊î◊ú◊ô◊ö..." });

  try {
    console.log("‚è≥ ◊û◊ï◊®◊ô◊ì ◊ß◊ï◊ë◊•:", url);

    const response = await fetch(url);
    if (!response.ok) throw new Error(`◊©◊í◊ô◊ê◊î ◊ë◊î◊ï◊®◊ì◊î: ${response.statusText}`);

    const buffer = await response.buffer();
    console.log(`üìè ◊í◊ï◊ì◊ú ◊ß◊ï◊ë◊•: ${buffer.length} bytes`);

    const targetFolder = folderId || process.env.GOOGLE_DRIVE_FOLDER_ID;

    console.log("üì§ ◊û◊¢◊ú◊î ◊ú-Drive...");
    const fileMetadata = {
      name: "file_" + Date.now(),
      parents: [targetFolder],
    };

    // ◊î◊ï◊§◊õ◊ô◊ù ◊ê◊™ ◊î÷æBuffer ◊ú◊ñ◊®◊ù
    const stream = Readable.from(buffer);

    const media = {
      mimeType: response.headers.get("content-type") || "application/octet-stream",
      body: stream,
    };

    const uploadResponse = await drive.files.create({
      requestBody: fileMetadata,
      media: media,
      fields: "id, name",
    });

    console.log("‚úÖ ◊î◊ï◊¢◊ú◊î ◊ë◊î◊¶◊ú◊ó◊î ◊ú-Drive:", uploadResponse.data);
  } catch (err) {
    console.error("‚ùå ◊©◊í◊ô◊ê◊î ◊ë◊™◊î◊ú◊ô◊ö:", err.message);
  }
});

// ◊û◊ê◊ñ◊ô◊†◊ô◊ù ◊ú◊©◊®◊™
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});


app.get("/list", async (req, res) => {
  try {
    const folderId = process.env.GOOGLE_DRIVE_FOLDER_ID;
    const list = await drive.files.list({
      q: `'${folderId}' in parents`,
      fields: "files(id, name)"
    });
    res.json(list.data.files);
  } catch (err) {
    console.error("‚ùå Error listing files:", err.message);
    res.status(500).send(err.message);
  }
});
